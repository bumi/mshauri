---
id: test_automation
title: Automated Software Tests
intro: Manual testing is error prone. We recommend to automate the testing of software and continuously test the system after each change.
priority: 500
description: |
  Manual testing is done in person, by clicking through the application. This is very expensive as it requires someone to set up an environment and execute the tests themselves, and it can be prone to human error.

  We recommend to automate tests using scripts that are executed by a computer.  
  Those tests are more robust than manual tests and can be executed any time when a change is made.

  Automated testing is a key component of continuous integration and continuous delivery and it's a great way to scale your QA process as you add new features to your application.

  There are many different types of tests, but to get started we recommend automated functionality tests.

  Functional tests test the functionality of the whole system (and not specific units).  
  Functional testing is conducted to evaluate the compliance of a system or component with specified functional requirements.

  ### How to get started
  The easiest way to get started with automating tests is to use your manual test cases and turn them into automated functional tests.

  Using tools like [mabl.com](https://www.mabl.com/) or [Selenium IDE](https://selenium.dev/selenium-ide/) help you to record any test
  interaction with your web application and to reply those automatically to test everything works.

  Sadly so far this only works for web applications and not iOS or Android applications.
  For Android applications [Genymotion](https://www.genymotion.com/test-automation/) or [Appium by Saucelabs](https://saucelabs.com/platform/automation-tools/appium) for iOS and Android can be helpful.

  It is recommended to keep test cases very small and specific to one functionality, e.g.:

  * Successful login with valid credentials
  * Unsuccessful login with invalid credentials
  * Signup with correct data

  Another great way to get started is writing [unit tests](https://en.wikipedia.org/wiki/Unit_testing) for every new piece of code.
  You can use the unit testing tool for your programming language (e.g. [PHPUnit for PHP](https://phpunit.de/)) to write a small check/unit test
  to validate that a function in your code executes as expected. (see [PHPUnit example](https://phpunit.readthedocs.io/en/8.5/writing-tests-for-phpunit.html#writing-tests-for-phpunit-examples-stacktest-php))


  #### Learn more about those tools here: 
  * [mabl](https://www.mabl.com/) - mabl offers automated self-healing tests that are easy to record and run.
  * [mabl step-by-step guide](https://www.mabl.com/mabl-u-tutorials-lesson-1)
  * [Selenium IDE](https://selenium.dev/selenium-ide/) - open source record and playback test automation for the web"
